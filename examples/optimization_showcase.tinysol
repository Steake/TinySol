// Advanced Optimization and Computational Strategies
// Demonstrates sophisticated mathematical optimization techniques

int fast_exponentiation(int base, int exponent) {
    // Efficient exponentiation using binary exponentiation
    int result = 1;
    
    while (exponent > 0) {
        // If exponent is odd, multiply result by base
        if (exponent % 2 == 1) {
            result = result * base;
        }
        
        // Square the base
        base = base * base;
        
        // Divide exponent by 2
        exponent = exponent / 2;
    }
    
    return result;
}

int prime_factorization(int n) {
    // Efficient prime factorization algorithm
    int factor_sum = 0;
    int current_factor = 2;
    
    while (current_factor * current_factor <= n) {
        // Check if current factor divides n
        while (n % current_factor == 0) {
            factor_sum = factor_sum + current_factor;
            n = n / current_factor;
        }
        
        current_factor = current_factor + 1;
    }
    
    // If n is a prime number greater than sqrt(original_n)
    if (n > 1) {
        factor_sum = factor_sum + n;
    }
    
    return factor_sum;
}

int efficient_fibonacci(int n) {
    // Matrix-based Fibonacci computation
    // Uses 2x2 matrix exponentiation for O(log n) complexity
    
    // Initial matrix
    int a = 1; int b = 1;
    int c = 1; int d = 0;
    
    // Exponentiation
    int i = 1;
    while (i < n) {
        int temp_a = a * a + b * c;
        int temp_b = a * b + b * d;
        int temp_c = c * a + d * c;
        int temp_d = c * b + d * d;
        
        a = temp_a;
        b = temp_b;
        c = temp_c;
        d = temp_d;
        
        i = i + 1;
    }
    
    return b;
}

int advanced_number_theory(int input) {
    // Comprehensive number theory analysis
    int exp_result = fast_exponentiation(2, input);
    int prime_factors = prime_factorization(input);
    int fib_value = efficient_fibonacci(input % 10);
    
    // Combine results with complex computational logic
    return exp_result + prime_factors + fib_value;
}

int main() {
    // Demonstrate advanced optimization techniques
    int test_values[5];
    test_values[0] = 5;   // Small number
    test_values[1] = 10;  // Medium number
    test_values[2] = 15;  // Another medium number
    test_values[3] = 20;  // Larger number
    test_values[4] = 25;  // Even larger number
    
    // Perform comprehensive optimization analysis
    int total_result = 0;
    int i = 0;
    while (i < 5) {
        total_result = total_result + advanced_number_theory(test_values[i]);
        i = i + 1;
    }
    
    return total_result;
}
